turtles-own [
  flockmates         ;; agentset of nearby turtles
  nearest-neighbor   ;; closest one of our flockmates
  target-door
  speed
  fear?

]

patches-own [
  room
]

to setup
  clear-all
  ask patches with [pxcor >= -7 and pxcor <= 7 and pycor >= 39 and pycor <= 40] [
    set pcolor green
    set room "exit"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= -7 and pxcor <= 7 and pycor >= -40 and pycor <= -39] [
    set pcolor green
    set room "exit"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= -60 and pxcor <= -50 and pycor >= 39 and pycor <= 40] [
    set pcolor green
    ;set room "exit1"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= 50 and pxcor <= 60 and pycor >= -40 and pycor <= -39] [
    set pcolor green
    set room "exit"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= 50 and pxcor <= 60 and pycor >= 39 and pycor <= 40] [
    set pcolor green
    set room "exit"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= -60 and pxcor <= -50 and pycor >= -40 and pycor <= -39] [
    set pcolor green
    ;set room "exit1"
    ;set pcolor yellow
  ]

  ask patches with [pxcor >= -7 and pxcor <= 7 and pycor >= 0 and pycor <= 10] [
    set pcolor red
    set room "Wall"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= 40 and pxcor <= 45 and pycor >= 15 and pycor <= 30] [
    set pcolor red
    set room "Wall"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= -45 and pxcor <= -40 and pycor >= 15 and pycor <= 30] [
    set pcolor red
    set room "Wall"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= 20 and pxcor <= 25 and pycor >= -30 and pycor <= -15] [
    set pcolor red
    set room "Wall"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= -25 and pxcor <= -20 and pycor >= -30 and pycor <= -15] [
    set pcolor red
    set room "Wall"
    ;set pcolor yellow
  ]
  ask patches with [pxcor >= -58 and pxcor <= -50 and pycor >= -30 and pycor <= 30][
    set pcolor yellow
    set room "Wall"
  ]


  ask n-of population patches with [pcolor = black][
      sprout 1   [
        set shape "person"
        set color yellow   ;; random shades look nice
        set size 3.0  ;; easier to see
        set speed 0.3
;        setxy random-xcor random-ycor
        set flockmates no-turtles
        set target-door one-of patches with [room = one-of ["exit"] ]
     ]
  ]
  fear
;  create-turtles population
;  [
;      if pcolor = black [
;        set color yellow   ;; random shades look nice
;        set size 1.5  ;; easier to see
;        setxy random-xcor random-ycor
;        set flockmates no-turtles
;        set target-door one-of patches with [room = one-of ["exit"] ]
;      ]
;  ]

  reset-ticks
end

to go
  ask turtles [
    flock
    flee
    if [room] of patch-here = "exit" [
      if any? turtles-here or any? turtles-here in-radius 5 [
        ask turtles-here [
          die
        ] ; make turtles disappeared when there are evacuated
      ]
    ]
    spread
  ]
  ;; the following line is used to make the turtles
  ;; animate more smoothly.
  repeat 5 [ ask turtles [ fd speed ] display ]


  ;; for greater efficiency, at the expense of smooth
  ;; animation, substitute the following line instead:
  ;;   ask turtles [ fd 1 ]
  let pop count turtles
  if pop = 0 [stop]
  tick
end

to flock  ;; turtle procedure
  find-flockmates
  if any? flockmates
    [ find-nearest-neighbor
      ifelse distance nearest-neighbor < minimum-separation
        [ separate ]
        [ align
          cohere
        ]
    ]
end

to flee
    ifelse count patches in-radius 5 with [pcolor = red ] > 0 [
      set heading (towards min-one-of patches with [pcolor = red ][distance myself] + 90   )
      if [pcolor] of patch-ahead 1 != black [
        fd 2
      ]
    ]
    [
      set heading towards target-door + random-float 5
    ]
end

to find-flockmates  ;; turtle procedure
  set flockmates other turtles in-radius vision
end

to find-nearest-neighbor ;; turtle procedure
  set nearest-neighbor min-one-of flockmates [distance myself]
end

;;; SEPARATE
to separate  ;; turtle procedure
  turn-away ([heading] of nearest-neighbor) max-separate-turn
end

;;; ALIGN
to align  ;; turtle procedure
  turn-towards average-flockmate-heading max-align-turn
end

to-report average-flockmate-heading  ;; turtle procedure
  ;; We can't just average the heading variables here.
  ;; For example, the average of 1 and 359 should be 0,
  ;; not 180.  So we have to use trigonometry.
  let x-component sum [dx] of flockmates
  let y-component sum [dy] of flockmates
  ifelse x-component = 0 and y-component = 0
    [ report heading ]
    [ report atan x-component y-component ]
end

;;; COHERE
to cohere  ;; turtle procedure
  turn-towards average-heading-towards-flockmates max-cohere-turn
end

to-report average-heading-towards-flockmates  ;; turtle procedure
  ;; "towards myself" gives us the heading from the other turtle
  ;; to me, but we want the heading from me to the other turtle,
  ;; so we add 180
  let x-component mean [sin (towards myself + 180)] of flockmates
  let y-component mean [cos (towards myself + 180)] of flockmates
  ifelse x-component = 0 and y-component = 0
    [ report heading ]
    [ report atan x-component y-component ]
end

;;; HELPER PROCEDURES

to turn-towards [new-heading max-turn]  ;; turtle procedure
  turn-at-most (subtract-headings new-heading heading) max-turn
end

to turn-away [new-heading max-turn]  ;; turtle procedure
  turn-at-most (subtract-headings heading new-heading) max-turn
end

;; turn right by "turn" degrees (or left if "turn" is negative),
;; but never turn more than "max-turn" degrees
to turn-at-most [turn max-turn]  ;; turtle procedure
  ifelse abs turn > max-turn
    [ ifelse turn > 0
        [ rt max-turn ]
        [ lt max-turn ] ]
    [ rt turn ]
end

to panic
  set color red
  set speed speed + 0.3
  set fear? true
end

to fear
  ask n-of 100 turtles [panic]
end

to spread
  ask turtles with [fear? = true and shape = "person soldier"]
  [ask other turtles-here with [ fear? = false ]
    [if (random-float 100) < 50
      [panic]
    ]
  ]
end